<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- spring中的配置-->
    <!-- 启用注解 -->
    <context:annotation-config/>
    <!-- 启用组件扫描,排除@Controller组件,该组件由springMvc配置扫描 -->
    <context:component-scan base-package="SystemManage">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <context:property-placeholder location="classpath:resource/dbConfig.properties"/>

    <!--配置 druid数据连接池-->
    <!-- 数据库1  -->
    <bean name="default-dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 配置 初始化大小 最小 最大 -->
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="10"/>
        <property name="maxActive" value="100"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        <property name="testWhileIdle" value="true"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接, 单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间, 单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="removeAbandoned" value="true"/>
        <property name="removeAbandonedTimeout" value="1800"/>
        <property name="logAbandoned" value="true"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="mergeStat,wall,log4j2"/>
    </bean>
    <!-- 数据库2  -->
    <!--<bean name="slave-dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--<property name="url" value="${jdbc.url2}"/>-->
        <!--<property name="username" value="${jdbc.username2}"/>-->
        <!--<property name="password" value="${jdbc.password2}"/>-->
        <!--<property name="driverClassName" value="${jdbc.driver2}" />-->
        <!--<property name="initialSize" value="5"/>-->
        <!--<property name="maxActive" value="100"/>-->
        <!--<property name="minIdle" value="10"/>-->
        <!--<property name="maxWait" value="60000"/>-->
        <!--<property name="validationQuery" value="SELECT 'x'"/>-->
        <!--<property name="testOnBorrow" value="true"/>-->
        <!--<property name="testOnReturn" value="true"/>-->
        <!--<property name="testWhileIdle" value="true"/>-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000"/>-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000"/>-->
        <!--<property name="removeAbandoned" value="true"/>-->
        <!--<property name="removeAbandonedTimeout" value="1800"/>-->
        <!--<property name="logAbandoned" value="true"/>-->
        <!--<property name="filters" value="mergeStat,wall,log4j2"/>-->
    <!--</bean>-->

    <!-- 创建出sqlSessionFactory对象,配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dynamicDataSource"/>
        <!-- 自动扫描映射文件目录 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 扫描 model包 使用别名 -->
        <property name="typeAliasesPackage" value="entity"/>
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <!-- 自动扫描映射文件目录-->
        <property name="mapperLocations">
            <array>
                <value>classpath*:/mapper/*/*.xml</value>
                <value>classpath*:/mapper/*.xml</value>
            </array>
        </property>
    </bean>

    <!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--给出需要扫描Dao接口包 -->
        <property name="basePackage" value="SystemManage.*"/>
    </bean>

    <!-- 自定义数据源切换类 -->
    <bean id="dynamicDataSource" class="SystemManage.Common.datasource.DynamicDataSource">
        <!-- 这里可以指定默认的数据源 -->
        <property name="defaultTargetDataSource" ref="default-dataSource" />
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <!-- 指定lookupKey和与之对应的数据源 -->
                <entry key="dataSource-default" value-ref="default-dataSource"></entry>
                <!--<entry key="dataSource-slave" value-ref="slave-dataSource"></entry>-->
            </map>
        </property>
    </bean>

    <!--数据源切面注入spring-->
    <bean id="dsChangeAspect" class="SystemManage.Common.datasource.DataSourceAspect"/>

</beans>