<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="SystemManage.RoleManage.dao.RoleDao">
    <resultMap id="BaseResultMap" type="SystemManage.RoleManage.entity.Role">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="seq" property="seq" jdbcType="TINYINT"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, name, seq, description, status
    </sql>

    <select id="findRolePageCondition" resultMap="BaseResultMap" parameterType="PageInfo">
        select
        <include refid="Base_Column_List"/>
        from role
        order by ${sort} ${order}
        limit #{from}, #{size}
    </select>

    <select id="findRolePageCount" resultType="java.lang.Integer" parameterType="PageInfo">
        select
        count(*) count
        from role
    </select>

    <select id="findResourceIdListByRoleId" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        e.resource_id AS id
        FROM
        role r
        LEFT JOIN role_resource e ON r.id = e.role_id
        WHERE
        r.id = #{id}
    </select>

    <select id="findRoleResourceIdListByRoleId" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT
        e.id AS id
        FROM
        role r
        LEFT JOIN role_resource e ON r.id = e.role_id
        WHERE
        r.id = #{id}
    </select>

    <insert id="insert" parameterType="SystemManage.RoleManage.entity.Role">
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into role (name, seq, description, status)
        values (#{name,jdbcType=VARCHAR}, #{seq,jdbcType=TINYINT}, #{description,jdbcType=VARCHAR},
        #{status,jdbcType=TINYINT})
    </insert>

    <select id="findRoleById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from role
        where id = #{id,jdbcType=BIGINT}
    </select>

    <update id="updateRole" parameterType="SystemManage.RoleManage.entity.Role">
        update role
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="seq != null">
                seq = #{seq,jdbcType=TINYINT},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <delete id="deleteRoleById" parameterType="java.lang.Long">
        delete from role
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <select id="findRoleAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from role order by seq
    </select>

    <select id="findRoleResourceListByRoleId" resultType="java.util.HashMap" parameterType="java.lang.Long">
        SELECT
        e.id AS id,
        s.permission AS permission
        FROM
        role r
        LEFT JOIN role_resource e ON r.id = e.role_id
        LEFT JOIN resource s ON e.resource_id = s.id
        WHERE
        r.id = #{id}
    </select>

    <select id="findResourceIdListByRoleIdAndType" resultType="SystemManage.ResourceManage.entity.Resource"
            parameterType="java.lang.Long">
        SELECT
        s.id AS id,
        s. NAME AS 'name',
        s.url AS url,
        s.permission AS permission,
        s.description AS description,
        s.icon AS icon,
        s.pid AS pid,
        s.seq AS seq,
        s. STATUS AS 'status',
        s.resourcetype AS resourcetype,
        s.createdate AS createdate
        FROM
        role r
        LEFT JOIN role_resource e ON r.id = e.role_id
        LEFT JOIN resource s ON e.resource_id = s.id
        WHERE
        r.id = #{id}
        AND s.resourcetype = 0
    </select>

</mapper>